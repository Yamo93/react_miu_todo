{"version":3,"sources":["mui-components/FormDialog/FormDialog.js","containers/List/List.js","mui-components/Snackbar/Snackbar.js","mui-components/AvatarList/AvatarList.js","mui-components/ClearButton/ClearButton.js","components/Tabs/Tabs.js","App.js","serviceWorker.js","index.js"],"names":["FormDialog","props","react_default","a","createElement","Dialog","open","dialogShown","onClose","closeEdit","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","TextField","autoFocus","margin","label","type","onChange","editedChange","onKeyUp","event","value","edited","editID","editedValue","fullWidth","DialogActions","Button","onClick","color","CheckboxList","_React$useState","React","useState","_React$useState2","Object","slicedToArray","checked","setChecked","handleToggle","task","newChecked","toConsumableArray","toggled","List","classes","root","tasks","map","index","labelId","concat","ListItem","key","role","undefined","dense","button","ListItemIcon","Checkbox","edge","done","tabIndex","disableRipple","inputProps","ListItemText","primary","text","ListItemSecondaryAction","IconButton","aria-label","openEdit","EditOutlined_default","deleted","Delete_default","changed","currentValue","variantIcon","success","CheckCircleIcon","warning","WarningIcon","error","ErrorIcon","info","InfoIcon","useStyles1","makeStyles","theme","backgroundColor","green","palette","dark","main","amber","icon","fontSize","iconVariant","opacity","marginRight","spacing","message","display","alignItems","MySnackbarContentWrapper","className","variant","other","objectWithoutProperties","Icon","SnackbarContent","assign","clsx","aria-describedby","action","Close_default","useStyles2","CustomizedSnackbars","snackbar","snackbarType","closeSnackbar","snackbarMessage","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","useStyles","flexGrow","maxWidth","demo","background","paper","title","InteractiveList","Grid","item","xs","md","doneTasks","doneTask","ListItemAvatar","Avatar","Done_default","input","ContainedButtons","clearDoneTasks","TabContainer","Typography","component","style","padding","children","LinkTab","Tab","preventDefault","NavTabs","setValue","AppBar","position","Tabs","newValue","href","Container","gutterBottom","length","FormControl","InputLabel","htmlFor","Input","addTask","Fab","fab","Add_default","App","state","editDialogShown","currentlyEditedTaskID","saveTasksInLS","itemName","localStorage","setItem","JSON","stringify","_this","myTasks","setState","prevState","filter","addTaskHandler","keyCode","newTasks","push","objectSpread","uuid","v4","editTaskHandler","editedTasks","parse","getItem","openEditDialog","closeEditDialog","inputChangeHandler","target","editInputChangeHandler","deleteTaskHandler","deletedTasks","openSnackbar","toggleAsDone","LSDoneTasks","toggledTasks","newTask","forEach","storedTasks","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50a418b6.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nexport default function FormDialog(props) {\r\n\r\n  return (\r\n      <Dialog open={props.dialogShown} onClose={props.closeEdit} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">Ändra uppgift</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Fyll i fältet nedan och ändra uppgiften:\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            label=\"Ändra uppgift\" \r\n            type=\"text\" \r\n            onChange={props.editedChange} \r\n            onKeyUp={(event, id, value) => props.edited(event, props.editID, props.editedValue)} \r\n            value={props.editedValue} \r\n            fullWidth\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={props.closeEdit} color=\"primary\">\r\n            Avbryt\r\n          </Button>\r\n          <Button onClick={(event, id, value) => props.edited(event, props.editID, props.editedValue)} color=\"primary\">\r\n            Ändra\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n  );\r\n}","import React from 'react';\r\n// import { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Delete from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/EditOutlined';\r\n\r\nimport FormDialog from '../../mui-components/FormDialog/FormDialog';\r\n\r\n\r\nexport default function CheckboxList(props) {\r\n  // const classes = useStyles();\r\n  const [checked, setChecked] = React.useState([]);\r\n\r\n  const handleToggle = task => () => {\r\n\r\n    const newChecked = [...checked];\r\n    props.toggled(task.id);\r\n\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  return (\r\n    <List classes={{root: 'centered'}}>\r\n      {props.tasks.map((task, index) => {\r\n        const labelId = `checkbox-list-label-${index}`;\r\n\r\n        return (\r\n          <ListItem key={task.id} role={undefined} dense button onClick={handleToggle(task)}>\r\n            <ListItemIcon>\r\n              <Checkbox\r\n                edge=\"start\"\r\n                checked={task.done}\r\n                tabIndex={-1}\r\n                disableRipple\r\n                inputProps={{ 'aria-labelledby': labelId }}\r\n              />\r\n            </ListItemIcon>\r\n            <ListItemText id={labelId} primary={`${task.text}`} />\r\n            <ListItemSecondaryAction>\r\n              <IconButton edge=\"end\" aria-label=\"Edit\" onClick={(id) => props.openEdit(task.id)}>\r\n                <EditIcon />\r\n              </IconButton>\r\n              <IconButton onClick={(id) => props.deleted(task.id)} edge=\"end\" aria-label=\"Delete\">\r\n                <Delete />\r\n              </IconButton>\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n        );\r\n      })}\r\n      <FormDialog closeEdit={props.closeEdit} dialogShown={props.dialogShown} changed={props.changed} currentValue={props.currentValue} edited={props.edited} editID={props.editID} editedValue={props.editedValue} editedChange={props.editedChange} />\r\n    </List>\r\n  );\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\n\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { amber, green } from '@material-ui/core/colors';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst variantIcon = {\r\n  success: CheckCircleIcon,\r\n  warning: WarningIcon,\r\n  error: ErrorIcon,\r\n  info: InfoIcon,\r\n};\r\n\r\nconst useStyles1 = makeStyles(theme => ({\r\n  success: {\r\n    backgroundColor: green[600],\r\n  },\r\n  error: {\r\n    backgroundColor: theme.palette.error.dark,\r\n  },\r\n  info: {\r\n    backgroundColor: theme.palette.primary.main,\r\n  },\r\n  warning: {\r\n    backgroundColor: amber[700],\r\n  },\r\n  icon: {\r\n    fontSize: 20,\r\n  },\r\n  iconVariant: {\r\n    opacity: 0.9,\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  message: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n}));\r\n\r\nfunction MySnackbarContentWrapper(props) {\r\n  const classes = useStyles1();\r\n  const { className, message, onClose, variant, ...other } = props;\r\n  const Icon = variantIcon[variant];\r\n\r\n  return (\r\n    <SnackbarContent\r\n      className={clsx(classes[variant], className)}\r\n      aria-describedby=\"client-snackbar\"\r\n      message={\r\n        <span id=\"client-snackbar\" className={classes.message}>\r\n          <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n          {message}\r\n        </span>\r\n      }\r\n      action={[\r\n        <IconButton key=\"close\" aria-label=\"Close\" color=\"inherit\" onClick={onClose}>\r\n          <CloseIcon className={classes.icon} />\r\n        </IconButton>,\r\n      ]}\r\n      {...other}\r\n    />\r\n  );\r\n}\r\n\r\nMySnackbarContentWrapper.propTypes = {\r\n  className: PropTypes.string,\r\n  message: PropTypes.node,\r\n  onClose: PropTypes.func,\r\n  variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired,\r\n};\r\n\r\nconst useStyles2 = makeStyles(theme => ({\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport default function CustomizedSnackbars(props) {\r\n  const classes = useStyles2();\r\n\r\n  let snackbar = null;\r\n\r\n  switch (props.snackbarType) {\r\n      case 'success':\r\n        snackbar = <MySnackbarContentWrapper\r\n          onClose={props.closeSnackbar}\r\n          variant=\"success\"\r\n          message={props.snackbarMessage}\r\n        />;\r\n        break;\r\n    case 'error':\r\n        snackbar = <MySnackbarContentWrapper\r\n        variant=\"error\"\r\n        className={classes.margin} \r\n        onClose={props.closeSnackbar} \r\n        message={props.snackbarMessage}\r\n      />;\r\n      break;\r\n      case 'warning':\r\n        snackbar = <MySnackbarContentWrapper\r\n        variant=\"warning\"\r\n        className={classes.margin} \r\n        onClose={props.closeSnackbar} \r\n        message={props.snackbarMessage}\r\n      />;\r\n      break;\r\n    default: return snackbar;\r\n  }\r\n\r\n  return (\r\n      <Snackbar\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'left',\r\n        }}\r\n        open={props.snackbar}\r\n        autoHideDuration={6000}\r\n        onClose={props.closeSnackbar}\r\n      >\r\n        {snackbar}\r\n      </Snackbar>\r\n  );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\n\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport TaskIcon from '@material-ui/icons/Done';\r\n\r\n\r\nimport './AvatarList.css';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    maxWidth: 752,\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  title: {\r\n    margin: theme.spacing(4, 0, 2),\r\n  },\r\n}));\r\n\r\n\r\nexport default function InteractiveList(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n        <Grid item xs={12} md={6}>\r\n          <div className={classes.demo}>\r\n            <List>\r\n                {props.doneTasks.map(doneTask => {\r\n                    return (\r\n                  <ListItem key={doneTask.id}>\r\n                  <ListItemAvatar>\r\n                    <Avatar classes={{root: 'taskicon'}}>\r\n                      <TaskIcon />\r\n                    </Avatar>\r\n                  </ListItemAvatar>\r\n                  <ListItemText\r\n                    primary={doneTask.text}\r\n                  />\r\n                </ListItem>\r\n                    );\r\n                })}\r\n            </List>\r\n          </div>\r\n        </Grid>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  input: {\r\n    display: 'none',\r\n  },\r\n}));\r\n\r\nexport default function ContainedButtons(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n      <Button variant=\"contained\" color=\"secondary\" className={classes.button} onClick={props.clearDoneTasks}>\r\n        Radera alla färdiga uppgifter\r\n      </Button>\r\n  );\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Container from '@material-ui/core/Container';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '../../containers/List/List';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nimport Snackbar from '../../mui-components/Snackbar/Snackbar';\r\n\r\nimport AvatarList from '../../mui-components/AvatarList/AvatarList';\r\n\r\nimport ClearButton from '../../mui-components/ClearButton/ClearButton';\r\n\r\nimport '../../containers/List/List.scss';\r\n\r\nfunction TabContainer(props) {\r\n  return (\r\n    <Typography component=\"div\" style={{ padding: 8 * 3 }}>\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nTabContainer.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nfunction LinkTab(props) {\r\n  return (\r\n    <Tab\r\n      component=\"a\"\r\n      onClick={event => {\r\n        event.preventDefault();\r\n      }}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nexport default function NavTabs(props) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  function handleChange(event, newValue) {\r\n    setValue(newValue);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Tabs variant=\"fullWidth\" value={value} onChange={handleChange}>\r\n          <LinkTab label=\"Uppgifter att göra\" href=\"/drafts\" />\r\n          <LinkTab label=\"Färdiga uppgifter\" href=\"/trash\" />\r\n        </Tabs>\r\n      </AppBar>\r\n      <Container classes={{root: 'main-container'}}>\r\n      {value === 0 && <TabContainer classes={{root: 'list-container'}}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Uppgifter att göra\r\n      </Typography>\r\n        {props.tasks.length < 1 ? <Typography variant=\"h6\" gutterBottom>\r\n         Välkommen! Lägg till nya uppgifter nedan.\r\n       </Typography> : \r\n       <List tasks={props.tasks} \r\n        deleted={props.deleted} \r\n        openEdit={props.openEdit} \r\n        closeEdit={props.closeEdit} \r\n        dialogShown={props.dialogShown} \r\n        changed={props.changed} \r\n        currentValue={props.currentValue} \r\n        edited={props.edited} \r\n        editID={props.editID} \r\n        editedValue={props.editedValue} \r\n        editedChange={props.editedChange} \r\n        toggled={props.toggled}\r\n         />}\r\n      <FormControl classes={{root: 'form-extend'}}>\r\n        <InputLabel htmlFor=\"component-simple\">Lägg till uppgift</InputLabel>\r\n        <Input classes={{root: 'add-input'}} id=\"component-simple\" onChange={props.changed} value={props.currentValue} onKeyUp={props.addTask} />\r\n      <Fab aria-label=\"Add\" onClick={props.addTask} className={classes.fab} color=\"primary\">\r\n          <AddIcon />\r\n      </Fab>\r\n      </FormControl>\r\n      {props.snackbar ? <Snackbar snackbar={props.snackbar} snackbarType={props.snackbarType} snackbarMessage={props.snackbarMessage} closeSnackbar={props.closeSnackbar} /> : null}\r\n      </TabContainer>}\r\n      {value === 1 && <TabContainer classes={{root: 'list-container'}}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n        Färdiga uppgifter\r\n      </Typography>\r\n        <AvatarList doneTasks={props.doneTasks} />\r\n        {props.doneTasks.length > 0 ? <ClearButton clearDoneTasks={props.clearDoneTasks} /> : <Typography variant=\"h6\" gutterBottom>\r\n        Du har inga färdiga uppgifter sparade.\r\n      </Typography> }\r\n      </TabContainer>}\r\n      </Container>\r\n    </div>\r\n  );\r\n}","import React, { Component } from 'react';\nimport './App.scss';\nimport Tabs from './components/Tabs/Tabs';\nimport uuid from 'uuid';\n\nclass App extends Component {\n\n  state = {\n    tasks: [],\n    doneTasks: [],\n    task: {\n      text: '',\n      id: null,\n      done: false\n    },\n    snackbar: false,\n    snackbarType: null,\n    snackbarMessage: null,\n    editDialogShown: false,\n    currentlyEditedTaskID: null,\n    editedValue: '',\n    currentValue: ''\n  }\n\n  componentDidMount() {\n    let storedTasks = JSON.parse(localStorage.getItem('myTasks')) || [];\n    let LSDoneTasks = JSON.parse(localStorage.getItem('doneTasks')) || [];\n\n    // Lägger in alla done tasks i staten igen (genom att söka i arrayen från LS)\n    // let doneTasks = storedTasks.filter(task => task.done === true);\n    this.setState({tasks: storedTasks, doneTasks: LSDoneTasks});\n\n  }\n\n  saveTasksInLS = (itemName, tasks) => {\n    localStorage.setItem(itemName, JSON.stringify(tasks));\n  }\n\n  clearDoneTasks = () => {\n    // Rensa från LS\n    this.saveTasksInLS('doneTasks', []);\n    let myTasks = [];\n\n    // Rensa från state (i båda arrays, så endast ogjorda tasks förblir)\n    this.setState(prevState => {\n      myTasks = prevState.tasks.filter(task => task.done === false);\n\n      this.saveTasksInLS('myTasks', myTasks);\n      return {\n        doneTasks: [],\n        tasks: myTasks\n      };\n    });\n  }\n\n  addTaskHandler = (event) => {\n    if (event.type === 'keyup' && event.keyCode !== 13) {\n      return false;\n    }\n\n    let newTasks = [];\n    this.setState(prevState => {\n      newTasks = [...prevState.tasks];\n      newTasks.push({\n        ...this.state.task,\n        id: uuid.v4()\n      });\n\n      \n      \n      if (prevState.task.text === '') {\n        return {\n          snackbar: true,\n          snackbarType: 'error',\n          snackbarMessage: 'Du måste fylla i fältet.'\n        };\n      }\n\n      this.saveTasksInLS('myTasks', newTasks);\n\n      return {\n        tasks: newTasks,\n        task: {\n          text: '',\n          id: null,\n          done: false\n        },\n        snackbar: true,\n        snackbarType: 'success',\n        snackbarMessage: 'Uppgiften har lagts till!',\n        currentValue: ''\n      };\n    });\n  }\n\n  editTaskHandler = (event, id, value) => {\n    let editedTasks = [];\n\n    if (event.type === 'keyup' && event.keyCode !== 13) {\n      return false;\n    }\n\n    this.setState(prevState => {\n      editedTasks = prevState.tasks.filter(task => {\n        if (id === task.id) {\n          task.text = value;\n          task.done = false; // återställer den till ogjord\n        }\n\n        return true;\n      });\n\n      this.saveTasksInLS('myTasks', editedTasks);\n\n      return {\n        tasks: editedTasks,\n        task: {\n          ...prevState.task,\n          text: ''\n        },\n        editDialogShown: false,\n        editedValue: '',\n        snackbar: true,\n        snackbarType: 'success',\n        snackbarMessage: 'Uppgiften har ändrats.',\n        // doneTasks: prevState.tasks.filter(task => task.done === true)\n        doneTasks: JSON.parse(localStorage.getItem('doneTasks')) || []\n      };\n    });\n    \n  }\n  \n  openEditDialog = (id) => {\n    this.setState({editDialogShown: true, \n      currentlyEditedTaskID: id\n    });\n  }\n  \n  closeEditDialog = () => {\n    this.setState({editDialogShown: false});\n  }\n\n  inputChangeHandler = (event) => {\n    this.setState({task: {\n      text: event.target.value,\n      id: null,\n      done: false\n      },\n      currentValue: event.target.value\n    });\n  }\n\n  editInputChangeHandler = (event) => {\n    this.setState({editedValue: event.target.value});\n  }\n\n  deleteTaskHandler = (id) => {\n    let deletedTasks = [];\n    this.setState(prevState => {\n      deletedTasks = prevState.tasks.filter(task => {\n        return task.id !== id;\n      });\n\n      this.saveTasksInLS('myTasks', deletedTasks);\n\n      return {\n        tasks: deletedTasks,\n        snackbar: true,\n        snackbarType: 'error',\n        snackbarMessage: 'Uppgiften har raderats.'\n      };\n    });\n  }\n\n  openSnackbar = (type) => {\n    this.setState(prevState => {\n      return {\n        snackbar: true,\n        snackbarType: type\n      };\n    });\n  }\n\n  closeSnackbar = (event) => {\n    this.setState({snackbar: false});\n  }\n\n  toggleAsDone = (id) => {\n    let LSDoneTasks = JSON.parse(localStorage.getItem('doneTasks')) || [];\n\n    this.setState(prevState => {\n      let newTask = {};\n      let toggledTasks = [];\n      prevState.tasks.forEach(task => {\n          if (task.id === id) {\n            newTask = {\n              ...task,\n              done: !task.done\n            };\n          }\n      });\n\n      toggledTasks = prevState.tasks.map(task => {\n        // Inte den som ska uppdateras\n        if (id !== task.id) {\n          return task;\n        }\n\n        return {\n          ...task,\n          done: !task.done\n        }\n      });\n\n      LSDoneTasks.push(newTask);\n\n      // Kontrollerar att ingen ogjord task sparas\n      LSDoneTasks = LSDoneTasks.filter(task => task.done === true);\n\n      this.saveTasksInLS('myTasks', toggledTasks);\n      this.saveTasksInLS('doneTasks', LSDoneTasks);\n\n      return {\n        tasks: toggledTasks,\n        task: newTask,\n        snackbar: true\n      }\n    });\n\n    this.setState(prevState => {\n      return {\n        doneTasks: LSDoneTasks,\n        snackbarType: prevState.task.done ? 'success' : 'warning',\n        snackbarMessage: prevState.task.done ? 'Uppgiften är utförd!' : 'Uppgiften har sparats som ej utförd.'\n      };\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Tabs changed={this.inputChangeHandler} \n        addTask={this.addTaskHandler} \n        currentValue={this.state.currentValue} \n        editedValue={this.state.editedValue} \n        tasks={this.state.tasks} \n        deleted={this.deleteTaskHandler} \n        snackbar={this.state.snackbar} \n        snackbarType={this.state.snackbarType} \n        snackbarMessage={this.state.snackbarMessage} \n        closeSnackbar={this.closeSnackbar} \n        openEdit={this.openEditDialog} \n        closeEdit={this.closeEditDialog} \n        dialogShown={this.state.editDialogShown} \n        edited={this.editTaskHandler} \n        editID={this.state.currentlyEditedTaskID} \n        editedChange={this.editInputChangeHandler} \n        toggled={this.toggleAsDone} \n        doneTasks={this.state.doneTasks} \n        clearDoneTasks={this.clearDoneTasks} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport 'typeface-roboto';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}